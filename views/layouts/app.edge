<!DOCTYPE html>
<html lang="en" class="theme-dark">
	<head>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

		<title>Blog Prototype</title>
		
		<link rel="preconnect" href="https://fonts.googleapis.com">
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
		
		@if(production)
			<link href="/styles/themes.min.css" rel="stylesheet">
			<link href="/styles/app.min.css" rel="stylesheet">
		@else
			<link href="/styles/themes.css" rel="stylesheet">
			<link href="/styles/app.css" rel="stylesheet">
		@endif

		<!-- Font Awesome - Preload to load asynchronously -->
		<link
			rel="preload" as="style" onload="this.onload=null;this.rel='stylesheet'"
			href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">

		@!section('styles')
	</head>
	<body>
		<!-- Navigation -->
		<nav>
			<a href="/">Home</a>
			<a href="/posts">Posts</a>

			@if(auth)
			<a href="/drafts">Drafts</a>
			@endif

			<span id="rightHand">
				<div id="search">
					<input value="{{ searchQuery ?? '' }}" placeholder="Search..." >
					<button aria-label="Search Function">
						<i class="fa-solid fa-magnifying-glass"></i>
					</button>
				</div>

				@if(auth)
				<button onClick="location.href='/logout'" id="logout">
					<i class="fa-solid fa-arrow-right-from-bracket"></i>
				</button>
				@endif
				
				<button id="settings" onClick="location.href = '/settings'" aria-label="Settings">
					<i class="fa-solid fa-gear"></i>
				</button>
			</span>
		</nav>

		<!-- Content -->
		<section id="content">
			@!section('content')
		</section>

		<!-- Footer -->
		<footer>
			<p>Â© Lewis Comstive 2023</p>
			<hr>

			@if(auth)
			<a href="/post/new">New post</a>
			<a href="/profile">Profile</a>
			@else
			<a href="/login">Login</a>
			@endif
		</footer>

		<!-- Settings load and apply -->
		<script>
			// Called immediately at script initialisation/load
			const DefaultFont = 'Open Sans'
			const DefaultFontSize = 18

			let theme = localStorage.getItem('theme')
			if(theme == null)
			{
				// Check if device has accessible preference for theme (light vs. dark mode)
				if(window.matchMedia)
				{
					// Set to light or dark mode if device has preference
					if (window.matchMedia('(prefers-color-scheme: dark)').matches)
						theme = 'Dark'
					else
						theme = 'Light'
				}
				else // Device does not have any accessible preferences related to light/dark mode
					theme = 'Dark'

				localStorage.setItem('theme', theme)
			}

			// Listen for device theme preference changes
			if(window.matchMedia)
				window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', event =>
				{
					let theme = localStorage.getItem('theme') ?? 'Light'
					if(theme == 'Light' && event.matches)
						theme = 'Dark'
					else if(theme == 'Dark' && !event.matches)
						theme = 'Light'
					
					localStorage.setItem('theme', theme)
					document.documentElement.className = `theme-${theme.toLowerCase().replaceAll(' ', '-')}`
				})

			let font = localStorage.getItem('font') ?? DefaultFont
			let fontSize = localStorage.getItem('fontSize') ?? DefaultFontSize

			document.documentElement.className = `theme-${theme.toLowerCase().replaceAll(' ', '-')}`
			document.body.style.fontFamily = `${font}, sans-serif`
			document.body.style.fontSize = fontSize + 'px'

			document.head.innerHTML += `<link rel="preload" as="style" onload="this.onload=null;this.rel='stylesheet'"
							href="https://fonts.googleapis.com/css2?family=${encodeURIComponent(font)}&display=swap">`
		</script>

		<!-- Search function -->
		<script>
			const searchInput = document.getElementById('search').getElementsByTagName('input')[0]
			const searchButton = document.getElementById('search').getElementsByTagName('button')[0]

			// When a key is pressed in the search input, resets this using setInterval.
			// If fired, redirects to /search/:query
			let searchInterval = null
			const SearchInputDelay = 750 // milliseconds

			ToggleSearchBar = () =>
			{
				searchInput.classList.toggle('active')
				let active = searchInput.classList.contains('active')
				
				searchButton.innerHTML = `<i class="fa-solid fa-${active ? 'circle-xmark' : 'magnifying-glass'}"></i>`

				if(!active && searchInterval != null)
				{
					clearInterval(searchInterval)
					searchInterval = null
				}

				if(!active)
					searchInput.value = ''
			}

			DoSearch = () =>
			{
				if(searchInput.value.length <= 3)
					return // Search query not long enough
				
				location.href = `/search/${searchInput.value}`
			}

			ResetSearchInterval = () =>
			{
				if(searchInterval)
					clearInterval(searchInterval)
				searchInterval = setInterval(DoSearch, SearchInputDelay)
			}

			searchButton.addEventListener('click', ToggleSearchBar)
			searchInput.addEventListener('keyup', ResetSearchInterval)

			// If page loaded from a search query, open up the seach bar
			if(searchInput.value != '')
				ToggleSearchBar()
		</script>
	</body>
</html>
